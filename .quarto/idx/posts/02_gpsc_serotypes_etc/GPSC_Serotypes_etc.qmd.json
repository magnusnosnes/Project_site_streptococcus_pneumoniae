{"title":"Serotypes, GPSC-clusters, and MLST types","markdown":{"yaml":{"title":"Serotypes, GPSC-clusters, and MLST types","editor":"visual","date":"2022-11-23","image":"Norway_historic.png","knitr":{"opts_chunk":{"comment":"#>","warning":false,"message":false,"collapse":true,"cache":false}},"execute":{"echo":false,"message":false}},"headingText":"library(stringr)","containsRefs":false,"markdown":"\n\n```{r remedy001, include=F}\n# gpsc = read.csv(\"/Users/magnusnygardosnes/Desktop/Postdoc/Pneumo/02_GPSC/GPSC_assignment/GPSC_assignment_clusters.csv\")\n# gpsc_ids = str_replace(gpsc$Taxon,\"_fasta\", \"\")\n# total_data = read.table(\"/Users/magnusnygardosnes/Dropbox/Postdoc_pneumococcus/00_Collection_overview/total_metadata_processed_and_combined.csv\")\n# total_data_ids = str_replace(total_data$fasta_name, \".fasta\", \"\")\n# match_fun = function(x) {\n#   \n#   if(sum((x == total_data_ids),na.rm=T)>1) {\n#     print(paste0(x, \" has multiple matches\"))\n#   }\n#   which(x == total_data_ids)\n# }\n# matchin_inds = unlist(lapply(gpsc_ids, FUN = match_fun))\n# total_data$GPSC = rep(NA, nrow(total_data))\n# total_data$GPSC[matchin_inds] = gpsc$Cluster\n# data_kept = total_data[matchin_inds,]\n#table(data_kept$GPSC)\n```\n\n## Outline\n\nThe following plots presents an analysis of GPSC clusters, serotypes and MLST for the data from Norway, Maela, Massachusetts, South Africa and USA. The categories were estimated by using the [pathogenwatch](https://pathogen.watch/).\n\n```{r, include = FALSE}\n# Load the required packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\nfile_names <- c(\"GPSC_massachusetts.csv\", \"GPSC_Maela.csv\", \"GPSC_SouthAfrica.csv\", \"GPSC_USA.csv\", \"GPSC_Norway_historic.csv\", \"GPSC_Norway_routine.csv\")\n\ndir_locations = \"/Users/magnusnygardosnes/Desktop/Postdoc/Pneumo/02_GPSC_MLST_cgMLST_and_Serotype/\"\n# List the file names\n\nfile_names = paste0(dir_locations,file_names)\n# Read the files into a list of data frames\ndf_list <- lapply(file_names, read.table, header = TRUE, sep = \",\")\n\n# Merge the matrices in the list into a single matrix\nMetadata <- do.call(rbind, lapply(df_list, function(x) x[order(x$Genome.Name),]))\n\n# Make dataset indicators. \ndataset = rep(c(\"massachusetts\", \"Maela\", \"SouthAfrica\", \"USA\", \"Norway_historic\", \"Norway_routine\"),unlist(lapply(df_list, nrow)))\n\n# Add the dataset indicators to the gpsc_data\nMetadata$dataset = dataset\n\n# Remove the \"Genome.ID\" and \"Version\" columns from the merged matrix\nMetadata <- Metadata[, !(names(Metadata) %in% c(\"Genome.ID\", \"Version\"))]\n\n\n\n#   ____________________________________________________________________________\n#   Serotype                                                                ####\n\nfile_names <- c(\"serotype_massachusetts.csv\", \"serotype_Maela.csv\", \"serotype_SouthAfrica.csv\", \"serotype_USA.csv\", \"serotype_Norway_historic.csv\", \"serotype_Norway_routine.csv\")\n\ndir_locations = \"/Users/magnusnygardosnes/Desktop/Postdoc/Pneumo/02_GPSC_MLST_cgMLST_and_Serotype/\"\n# List the file names\n\nfile_names = paste0(dir_locations,file_names)\n\n# Read the files into a list of data frames\ndf_list <- lapply(file_names, read.table, header = TRUE, sep = \",\")\nunlist(lapply(df_list, nrow))\n# Merge the matrices in the list into a single matrix\nserotype <- do.call(rbind, lapply(df_list, function(x) x[order(x$Genome.Name),]))\n\nserotype <- serotype[, !(names(serotype) %in% c(\"Genome.ID\", \"Version\"))]\nnrow(serotype)\nMetadata = merge(Metadata, serotype, by = \"Genome.Name\")\n\n\n#   ____________________________________________________________________________\n#   MLST                                                                    ####\n\nfile_names <- c(\"mlst_massachusetts.csv\", \"mlst_Maela.csv\", \"mlst_SouthAfrica.csv\", \"mlst_USA.csv\", \"mlst_Norway_historic.csv\", \"mlst_Norway_routine.csv\")\n\ndir_locations = \"/Users/magnusnygardosnes/Desktop/Postdoc/Pneumo/02_GPSC_MLST_cgMLST_and_Serotype/\"\n# List the file names\n\nfile_names = paste0(dir_locations,file_names)\n\n# Read the files into a list of data frames\ndf_list <- lapply(file_names, read.table, header = TRUE, sep = \",\")\n\n# Merge the matrices in the list into a single matrix\nmlst <- do.call(rbind, lapply(df_list, function(x) x[order(x$Genome.Name),]))\n\nmlst <- mlst[, !(names(mlst) %in% c(\"Genome.ID\", \"Version\"))]\n\nmlst <- mlst[,c(\"Genome.Name\", \"ST\")]\n\nMetadata = merge(Metadata, mlst, by = \"Genome.Name\")\n\n#The ST column is weird. Set all entries with longer than 10 characters to NA\nMetadata$ST[nchar(Metadata$ST) > 10] <- NA\n\nwrite.table(Metadata,\"~/Dropbox/Postdoc_pneumococcus/00_Collection_overview/assigned_metadata.csv\")\n# My data looks like:\n#   \n#   Genome.Name       Strain         dataset Serotype   ST\n# 1       08-04           18 Norway_historic       14    9\n# 2       08-04           18 Norway_historic       14    9\n# 3       08-04           18 Norway_historic       14    9\n# 4       08-04           18 Norway_historic       14    9\n# 5        1-83 Not assigned Norway_historic      32F <NA>\n# 6        1-83 Not assigned Norway_historic      32F <NA>\n#   \n# For each unique value in dataset, can you make piecharts of the strain strain, Serotype column and the ST column?\n\n\n```\n\n```{r}\n#\n# My data looks like:\n#   \n#   Genome.Name       Strain         dataset Serotype   ST\n# 1       08-04           18 Norway_historic       14    9\n# 2       08-04           18 Norway_historic       14    9\n# 3       08-04           18 Norway_historic       14    9\n# 4       08-04           18 Norway_historic       14    9\n# 5        1-83 Not assigned Norway_historic      32F <NA>\n# 6        1-83 Not assigned Norway_historic      32F <NA>\n#   \n# For each unique value unique value in the dataset column, can you make piecharts of the Strain column, Serotype column and the ST column?\n\n# My data looks like:\n#   \n#   Genome.Name       Strain         dataset Serotype   ST\n# 1       08-04           18 Norway_historic       14    9\n# 2       08-04           18 Norway_historic       14    9\n# 3       08-04           18 Norway_historic       14    9\n# 4       08-04           18 Norway_historic       14    9\n# 5        1-83 Not assigned Norway_historic      32F <NA>\n# 6        1-83 Not assigned Norway_historic      32F <NA>\n#   \n# For each unique value unique value in the dataset column, if there are fewer than 10 occurences of strain, serotype and ST, given that dataset, can you set the value of strain, serotype and ST to \"other\"?\n\n\n# Metadata_grouped now looks like: \n#   \n# Metadata_grouped\n# # A tibble: 11,770 Ã— 5\n# # Groups:   dataset [5]\n#    Genome.Name Strain dataset         Serotype ST   \n#    <chr>       <chr>  <chr>           <chr>    <chr>\n#  1 08-04       18     Norway_historic 14       9    \n#  2 08-04       18     Norway_historic 14       9    \n#  3 08-04       18     Norway_historic 14       9    \n#  4 08-04       18     Norway_historic 14       9    \n#  5 1-83        18     Norway_historic 14       9    \n#  6 1-83        18     Norway_historic 14       9    \n#  7 1-83        18     Norway_historic 14       9    \n#  8 1-83        18     Norway_historic 14       9    \n#  9 1-84        18     Norway_historic 14       9    \n# 10 1-84        18     Norway_historic 14       9    \n# \n# Can you make a piechart of strain, serotype and st for each unique value in dataset?\n\n\n\nlibrary(plotly)\n\nmake_barplot <- function(data, column, dataset) {\n  #data=Metadata; column=\"ST\"; dataset=\"Norway_historic\";\n  #Set plot title\n  \n  plot_title = dataset\n  #Remove underscore:\n  plot_title = gsub(\"_\", \" \", plot_title)\n  \n  # Select the rows of data with the specified dataset value\n  data_subset <- data[data$dataset == dataset,]\n  \n  # Create a table of the values in the specified column\n  value_counts <- table(data_subset[, column])\n  \n  # Sort the table and reduce it to the top 50 entries\n  value_counts <- sort(value_counts,decreasing = T)\n  value_counts <- head(value_counts, 50)\n  \n  # Define the original color vector\ncolors <- hcl(h = seq(15, 375, length = length(value_counts)),\n              l = 65,\n              c = 100)[order(value_counts)]\n\n# Calculate the number of repetitions needed to match the length of the data\nnum_reps <- ceiling(length(value_counts) / length(colors))\n\n# Repeat the colors in the original color vector\ncolors <- rep(colors, num_reps)\n  \n  \n  # Determine the maximum y-axis value\n  max_y_value <- max(value_counts) * 1.1\n  \n  # Create a bar plot using the value counts\n   ggplot(data.frame(\"x\" = names(value_counts), \"y\" = as.numeric(value_counts)), aes(reorder(x, -y),y,fill=x))+\n  geom_bar(stat = \"identity\", position=\"dodge\")+\n    scale_fill_manual(values = colors)+\n    theme_bw()+\n   theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1, size = 8))+\n    labs(fill=\"\")+scale_y_continuous(expand=c(0,0),limits = c(0,max_y_value))+scale_x_discrete(expand=c(0,0))+ggtitle(plot_title)+\n    ylab(\"Counts\")+\n    xlab(column)\n}\n\nmake_interactive_barplot <- function(data, column, dataset) {\n  # Create the ggplot bar plot\n  ggplot_plot <- make_barplot(data, column, dataset)\n  \n  # Convert the ggplot plot to an interactive plotly plot\n  ggplotly(ggplot_plot)\n}\n#\n```\n\n## GPSC clusters\n\n```{r}\nlibrary(shiny)\n\n#make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_historic\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_routine\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Maela\")\n#make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"massachusetts\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"SouthAfrica\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"USA\")\n# # Create the tabset panel\n\ntabsetPanel(\n  tabPanel(\"Norway historic\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_historic\")),\n  tabPanel(\"Norway routine\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_routine\")),\n  tabPanel(\"Maela\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Maela\")),\n  tabPanel(\"Massachusetts\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"massachusetts\")),\n  tabPanel(\"SouthAfrica\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"SouthAfrica\")),\n  tabPanel(\"USA\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"USA\")),\n  type=\"pills\"\n)\n```\n\n## Serotypes\n\n```{r}\nlibrary(shiny)\n\n#make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_historic\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_routine\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Maela\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"SouthAfrica\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"USA\")\n# # Create the tabset panel\n\ntabsetPanel(\n  tabPanel(\"Norway historic\", make_interactive_barplot(data = Metadata, column = \"Serotype\", dataset = \"Norway_historic\")),\n  tabPanel(\"Norway routine\", make_interactive_barplot(data = Metadata, column = \"Serotype\", dataset = \"Norway_routine\")),\n  tabPanel(\"Maela\", make_interactive_barplot(data = Metadata, column = \"Serotype\", dataset = \"Maela\")),\n  tabPanel(\"Massachusetts\", make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"massachusetts\")),\n  tabPanel(\"SouthAfrica\", make_interactive_barplot(data = Metadata, column = \"Serotype\", dataset = \"SouthAfrica\")),\n  tabPanel(\"USA\", make_interactive_barplot(data = Metadata, column = \"Serotype\", dataset = \"USA\")),\n  type=\"pills\"\n)\n```\n\n## MLST\n\n```{r}\nlibrary(shiny)\n\n#make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_historic\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Norway_routine\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"Maela\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"SouthAfrica\")\n# make_interactive_barplot(data = Metadata, column = \"Strain\", dataset = \"USA\")\n# # Create the tabset panel\n\ntabsetPanel(\n  tabPanel(\"Norway historic\", make_interactive_barplot(data = Metadata, column = \"ST\", dataset = \"Norway_historic\")),\n  tabPanel(\"Norway routine\", make_interactive_barplot(data = Metadata, column = \"ST\", dataset = \"Norway_routine\")),\n  tabPanel(\"Maela\", make_interactive_barplot(data = Metadata, column = \"ST\", dataset = \"Maela\")),\n  tabPanel(\"Massachusetts\", make_interactive_barplot(data = Metadata, column = \"ST\", dataset = \"massachusetts\")),\n  tabPanel(\"SouthAfrica\", make_interactive_barplot(data = Metadata, column = \"ST\", dataset = \"SouthAfrica\")),\n  tabPanel(\"USA\", make_interactive_barplot(data = Metadata, column = \"ST\", dataset = \"USA\")),\n  type=\"pills\"\n)\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"GPSC_Serotypes_etc.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"lux","title":"Serotypes, GPSC-clusters, and MLST types","date":"2022-11-23","image":"Norway_historic.png","knitr":{"opts_chunk":{"comment":"#>","warning":false,"message":false,"collapse":true,"cache":false}}},"extensions":{"book":{"multiFile":true}}}}}